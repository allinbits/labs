# Example environment file for gnolinker
# Copy this to .env, .dev.env, .stg.env, or .prod.env and fill in your values

# =================
# Discord Bot Configuration
# =================
GNOLINKER__DISCORD_TOKEN="your-discord-bot-token"
# Discord bot token from https://discord.com/developers/applications
# Required for all Discord operations

# =================
# Gno Network Configuration
# =================
GNOLINKER__SIGNING_KEY="hex-encoded-signing-key"
# 64-byte hex-encoded signing key for generating claim links
# Required for user/role linking workflows

GNOLINKER__GNOLAND_RPC_ENDPOINT="https://rpc.gno.land:443"
# Gno RPC endpoint URL
# Default: https://rpc.gno.land:443

GNOLINKER__BASE_URL="https://gno.land"
# Base URL for claim links shown to users
# Default: https://gno.land

GNOLINKER__USER_CONTRACT="r/linker000/discord/user/v0"
# User contract path on Gno blockchain
# Default: r/linker000/discord/user/v0

GNOLINKER__ROLE_CONTRACT="r/linker000/discord/role/v0"
# Role contract path on Gno blockchain
# Default: r/linker000/discord/role/v0

# =================
# Storage Configuration
# =================
GNOLINKER__STORAGE_TYPE="memory"
# Storage backend type
# Options: memory, s3
# Default: memory

GNOLINKER__STORAGE_BUCKET="gnolinker-data"
# S3 bucket name for configuration storage
# Fallback: GNOLINKER__S3_BUCKET
# Default: gnolinker-data

GNOLINKER__STORAGE_PREFIX="configs"
# S3 object prefix for configuration files
# Default: configs

# =================
# AWS S3 Configuration
# =================
# These follow AWS SDK standard naming conventions
# The bot will automatically use AWS_* environment variables

AWS_REGION="us-east-1"
# AWS region for S3 operations
# Fallback: GNOLINKER__S3_REGION
# Default: us-east-1

AWS_ACCESS_KEY_ID="your-access-key"
# AWS access key ID for S3 authentication
# Required for S3 storage type

AWS_SECRET_ACCESS_KEY="your-secret-key"
# AWS secret access key for S3 authentication
# Required for S3 storage type

AWS_ENDPOINT_URL_S3="http://localhost:9000"
# S3 endpoint URL for S3-compatible services (MinIO, Tigris)
# Leave empty for AWS S3
# Fallback: AWS_ENDPOINT_URL, GNOLINKER__S3_ENDPOINT

# =================
# Local Development (MinIO)
# =================
# For local development with Docker Compose MinIO:
# AWS_ACCESS_KEY_ID="minioadmin"
# AWS_SECRET_ACCESS_KEY="minioadmin123"
# AWS_ENDPOINT_URL_S3="http://localhost:9000"

# =================
# Production (Tigris on Fly.io)
# =================
# For production deployment with Tigris:
# AWS_REGION="auto"
# AWS_ENDPOINT_URL_S3="https://fly.storage.tigris.dev"

# =================
# Cache Configuration
# =================
GNOLINKER__CACHE_SIZE="100"
# Cache size for configuration store
# Default: 100

GNOLINKER__CACHE_TTL="1h"
# Cache TTL duration (e.g., 1h, 30m, 600s)
# Default: 1h

# =================
# Distributed Locking
# =================
GNOLINKER__LOCK_TYPE="none"
# Lock backend type for distributed coordination
# Options: none, memory, s3, redis
# Default: none

GNOLINKER__LOCK_BUCKET="gnolinker-data"
# S3 bucket for distributed locks
# Fallback: GNOLINKER__STORAGE_BUCKET
# Default: gnolinker-data

GNOLINKER__LOCK_REGION="us-east-1"
# S3 region for distributed locks
# Fallback: AWS_REGION
# Default: us-east-1

GNOLINKER__LOCK_PREFIX="locks/"
# S3 prefix for lock objects
# Default: locks/

GNOLINKER__LOCK_DEFAULT_TTL="30s"
# Default lock TTL duration
# Default: 30s

GNOLINKER__LOCK_RETRY_INTERVAL="100ms"
# Lock retry interval
# Default: 100ms

GNOLINKER__LOCK_MAX_RETRIES="10"
# Maximum lock retry attempts
# Default: 10

GNOLINKER__LOCK_INSTANCE_ID=""
# Lock instance ID for distributed coordination
# Auto-generated if empty

GNOLINKER__LOCK_REDIS_URL="redis://localhost:6379"
# Redis URL for Redis-based locks (not yet implemented)

# =================
# Role Management
# =================
GNOLINKER__DEFAULT_VERIFIED_ROLE_NAME="Gno-Verified"
# Default name for verified user role
# Default: Gno-Verified

GNOLINKER__AUTO_CREATE_ROLES="true"
# Automatically create roles when needed
# Default: true

# =================
# Bot Settings
# =================
GNOLINKER__LOG_LEVEL="info"
# Log level for bot output
# Options: debug, info, warn, error
# Default: info

GNOLINKER__CLEANUP_OLD_COMMANDS="false"
# Remove all existing slash commands on startup
# Use only when upgrading from old command structure
# Default: false

# =================
# Development Quick Start
# =================
# For local development with MinIO:
# 1. Run: make dev
# 2. Set: GNOLINKER__STORAGE_TYPE="s3"
# 3. Set: GNOLINKER__LOCK_TYPE="s3"
# 4. Use MinIO credentials above

# For production deployment:
# 1. Set: GNOLINKER__STORAGE_TYPE="s3"
# 2. Set: GNOLINKER__LOCK_TYPE="s3"
# 3. Configure AWS credentials
# 4. Set appropriate S3 bucket and region