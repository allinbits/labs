# Example environment file for gnolinker
# Copy this to .env, .dev.env, .stg.env, or .prod.env and fill in your values

# Discord Bot Configuration
GNOLINKER__DISCORD_TOKEN="your-discord-bot-token"
# Note: Roles are now managed per-guild automatically by the bot.
# Admin roles are auto-detected and verified roles are auto-created.

# Gno Network Configuration
GNOLINKER__SIGNING_KEY="hex-encoded-signing-key"
GNOLINKER__GNOLAND_RPC_ENDPOINT="https://rpc.gno.land:443"
GNOLINKER__BASE_URL="https://gno.land"
GNOLINKER__USER_CONTRACT="r/linker000/discord/user/v0"
GNOLINKER__ROLE_CONTRACT="r/linker000/discord/role/v0"

# Storage Configuration (for multi-server support)
# Options: file, s3, redis
GNOLINKER__STORAGE_TYPE="file"

# File Storage (default for single-server)
GNOLINKER__CONFIG_DIR="./configs"

# S3/MinIO Storage (for multi-server and local development with Docker)
GNOLINKER__S3_BUCKET="gnolinker-configs"
GNOLINKER__S3_REGION="us-east-1"
GNOLINKER__S3_ACCESS_KEY_ID="minioadmin"
GNOLINKER__S3_SECRET_ACCESS_KEY="minioadmin123"
# For local development with Docker Compose MinIO:
GNOLINKER__S3_ENDPOINT="http://localhost:9000"
GNOLINKER__S3_USE_SSL="false"
# For production AWS S3 (omit endpoint and set use_ssl to true):
# GNOLINKER__S3_ENDPOINT=""
# GNOLINKER__S3_USE_SSL="true"

# Redis Storage (optional)
GNOLINKER__REDIS_URL="redis://localhost:6379"

# Cache Settings
GNOLINKER__CACHE_SIZE="100"
GNOLINKER__CACHE_TTL="1h"

# Default Role Settings
GNOLINKER__DEFAULT_VERIFIED_ROLE_NAME="Gno-Verified"
GNOLINKER__AUTO_CREATE_ROLES="true"

# Bot Settings
GNOLINKER__LOG_LEVEL="info"
GNOLINKER__CLEANUP_OLD_COMMANDS="false"